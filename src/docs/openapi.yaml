openapi: 3.0.3
info:
  title: Practica 1 - API
  version: "1.0.0"
  description: >
    API de mensajes con autenticación usuarios, follows y búsquedas - Samuel Beteta | 202325506

servers:
  - url: http://localhost:3000

tags:
  - name: Autenticación
  - name: Mensajes
  - name: Usuarios

paths:
  /auth/register:
    post:
      tags: [Autenticación]
      summary: Registrar un nuevo usuario
      description: Crea un usuario. El campo `dob` debe ser AAAA-MM-DD.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [username, display_name, email, password, dob]
              properties:
                username:
                  type: string
                  example: sbeteta78
                display_name:
                  type: string
                  example: Samuel Beteta
                email:
                  type: string
                  format: email
                  example: sbeteta78@gmail.com
                password:
                  type: string
                  example: password123
                dob:
                  type: string
                  format: date
                  example: 2003-06-03
                bio:
                  type: string
                  nullable: true
                  example: "Hola! Soy dev."
      responses:
        '201':
          description: Usuario creado
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Faltan campos obligatorios
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Error' }
        '409':
          description: Email o username ya registrados
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Error' }
        '500':
          description: Error interno
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Error' }

  /auth/login:
    post:
      tags: [Autenticación]
      summary: Iniciar sesión
      description: Genera un token de inicio de sesión y muestra los datos del usuario.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [email, password]
              properties:
                email:
                  type: string
                  format: email
                  example: sbeteta78@gmail.com
                password:
                  type: string
                  example: password123
      responses:
        '200':
          description: Login correcto
          content:
            application/json:
              schema:
                type: object
                properties:
                  message: { type: string, example: Login correcto }
                  token:   { type: string, example: eyJhbGciOiJIUzI1NiIsInR... }
                  user:    { $ref: '#/components/schemas/User' }
        '400':
          description: Faltan credenciales
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Error' }
        '401':
          description: Credenciales inválidas
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Error' }
        '500':
          description: Error interno
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Error' }

  /messages/latest:
    get:
      tags: [Mensajes]
      summary: Obtener los últimos 10 mensajes
      description: Devuelve **10** mensajes del más reciente al más antiguo.
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items: { $ref: '#/components/schemas/Message' }
        '500':
          description: Error interno
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Error' }

  /messages/search:
    get:
      tags: [Mensajes]
      summary: Buscar mensajes por coincidencia de texto
      description: Busca coincidencias en el campo `body` entre todos los mensajes.
      parameters:
        - in: query
          name: q
          required: true
          description: Texto a buscar:
          schema:
            type: string
            example: hola mundo
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items: { $ref: '#/components/schemas/Message' }
        '400':
          description: Falta parámetro de texto (`q`)
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Error' }
        '500':
          description: Error interno
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Error' }


  /messages:
    post:
      tags: [Mensajes]
      summary: Crear un nuevo mensaje
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [body]
              properties:
                body:
                  type: string
                  example: "Hola a todos!"
      responses:
        '201':
          description: Mensaje creado
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Message' }
        '400':
          description: Faltan campos
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Error' }
        '401':
          description: No autorizado (faltó token o inválido)
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Error' }
        '500':
          description: Error interno
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Error' }

  /messages/user/{id}:
    get:
      tags: [Mensajes]
      summary: Obtener mensajes de un usuario
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: integer }
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items: { $ref: '#/components/schemas/Message' }
        '400':
          description: ID inválido
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Error' }
        '500':
          description: Error interno
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Error' }

  /messages/following/{id}:
    get:
      tags: [Mensajes]
      summary: Obtener mensajes de usuarios seguidos
      description: Devuelve mensajes publicados por usuarios seguidos.
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: integer }
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items: { $ref: '#/components/schemas/Message' }
        '400':
          description: ID inválido
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Error' }
        '500':
          description: Error en mensajes de seguidos
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Error' }

  /users/{id}:
    get:
      tags: [Usuarios]
      summary: Obtener un usuario por ID
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: integer }
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema: { $ref: '#/components/schemas/User' }
        '400':
          description: ID inválido
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Error' }
        '404':
          description: Usuario no encontrado
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Error' }
        '500':
          description: Error interno
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Error' }

    delete:
      tags: [Usuarios]
      summary: Eliminar tu usuario
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: integer }
      responses:
        '200':
          description: Usuario eliminado (y conteos de entidades borradas)
          content:
            application/json:
              schema:
                type: object
                properties:
                  message: { type: string, example: Usuario eliminado. }
                  deleted:
                    type: object
                    properties:
                      messages: { type: integer, example: 3 }
                      follows: { type: integer, example: 5 }
                      followers_pairs: { type: integer, example: 5 }
        '400':
          description: ID inválido
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Error' }
        '403':
          description: Solo puedes borrar tu propio usuario
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Error' }
        '404':
          description: Usuario no encontrado
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Error' }
        '401':
          description: No autorizado
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Error' }
        '500':
          description: Error al eliminar usuario
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Error' }

  /users/{id}/follow/{targetId}:
    post:
      tags: [Usuarios]
      summary: Seguir a otro usuario
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: integer }
          description: ID del seguidor 
        - in: path
          name: targetId
          required: true
          schema: { type: integer }
          description: ID del usuario a seguir
      responses:
        '200':
          description: Operación exitosa
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FollowResponse'
        '400':
          description: IDs inválidos o no puedes seguirte a ti mismo
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Error' }
        '403':
          description: No puedes actuar en nombre de otro usuario
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Error' }
        '401':
          description: No autorizado
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Error' }
        '500':
          description: Error al seguir
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Error' }

    delete:
      tags: [Usuarios]
      summary: Dejar de seguir
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: integer }
          description: ID del seguidor
        - in: path
          name: targetId
          required: true
          schema: { type: integer }
          description: ID del usuario a dejar de seguir
      responses:
        '200':
          description: Operación exitosa
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnfollowResponse'
        '400':
          description: IDs inválidos
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Error' }
        '403':
          description: No puedes actuar en nombre de otro usuario
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Error' }
        '404':
          description: No lo seguías
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Error' }
        '401':
          description: No autorizado
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Error' }
        '500':
          description: Error al dejar de seguir
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Error' }

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    User:
      type: object
      properties:
        id_user:     { type: integer, example: 8 }
        username:    { type: string,  example: sbeteta78 }
        display_name: { type: string,  example: Samuel Beteta }
        email:       { type: string,  format: email, example: sbeteta78@gmail.com }
        dob:         { type: string,  format: date, example: 2003-06-03 }
        bio:         { type: string,  nullable: true, example: "Hola! Soy dev." }
        created_at:  { type: string,  format: date-time, example: "2025-09-19T15:04:05Z" }
        updated_at:  { type: string,  format: date-time, example: "2025-09-19T15:04:05Z" }

    Message:
      type: object
      properties:
        id_message: { type: integer, example: 123 }
        id_user:    { type: integer, example: 8 }
        body:       { type: string,  example: "Hola mundo" }
        created_at: { type: string,  format: date-time, example: "2025-09-19T15:04:05Z" }

    FollowResponse:
      type: object
      properties:
        follower: { type: integer, example: 1 }
        followee: { type: integer, example: 2 }
        message:  { type: string,  example: "Ahora sigues a este usuario." }

    UnfollowResponse:
      type: object
      properties:
        follower: { type: integer, example: 1 }
        followee: { type: integer, example: 2 }
        message:  { type: string,  example: "Has dejado de seguir a este usuario." }

    Error:
      type: object
      properties:
        error:
          type: string
          example: "Mensaje de error."
